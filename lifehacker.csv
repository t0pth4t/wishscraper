text
" (with no grades!) harder than 95% of college students (and, maybe, 65% of graduate students) actually do study."
title,text
Popular,"Young people, especially in technology, tend to fall into those traps—labeling something like a job or a company “good” or “bad” and thus reacting emotionally and sub-optimally. You might think something like: “I’m not going to work hard because "
title,text
1. Don’t be afraid to learn on the job.,"When you’re starting your career in any field, you probably have high hopes but don’t really know what to expect. Should you keep your head down and do what you’re told or should you aim only for ambitious projects? Here’s what I’ve learned in my experience as a software developer."
2. Manage your career aggressively. Take responsibility for your own education and progress.,Let me bat out a few suggestions based on my experience and observations. This list is not all-inclusive—because it can’t be. Your experience will be unique.
3. Recognize under-performance ," Sadly, bookshelves at most workplaces are mostly just set-dressing (look at what our hackers claim to read!). You rarely see anyone "
 over-performance and avoid them.," one, especially not during core work hours. Still, you have a computer and can read papers and "
4. Never ask for permission unless it would be reckless not to.,books through an e-reader. So get to it. You’re not going to learn much if you just do what you’re assigned and little more. You also won’t move forward if you ask for more work and get grunt work. Be willing to slow down and do things right and read up on the fundamentals. How do people develop an expertise in a coveted domain like machine learning? One day at a time.
5. Never apologize for being autonomous or using your own time.," One out of ten people (if that) find a mentor who will clear paths and pull strings and make sure they come out on top for promotions and plum projects. If you’re in that other nine, and you will be most of the time, no one’s looking out for you. So look out for yourself. Don’t ask for more work unless you trust that person to give you "
"6. Learn CS666 (what I call the politics of software development) and you can usually forget about it. Refuse to learn it, and it’ll be with you forever."," work than you’d get otherwise. When you can, do the bare minimum amount of work that’s not advancing your career or teaching you something; if it has no career-adding value, people probably don’t care enough about it for it to matter that you’re putting in a minimum effort, as long as you don’t get in anyone’s way. After three years, if you’re not being groomed for something bigger and badder, "
7. Don’t be quixotic and try to prove your bosses wrong., (read: changing jobs) is usually the way to go.
8. Don’t fight other peoples’ battles.,"You're thinking of jumping ship. Maybe it's your job, a relationship, a degree, or some…"
9. Try to avoid thinking in terms of “good” versus “bad.” Be ready to play it either way. ," There are a lot of low-effort players who stay employed for years. This isn’t a bad strategy if you’re settled, but I wouldn’t fall too low. That said, the only people who typically get fired for under-performance are the people who fail so badly that they generate work for others. People who hide and do little tend not to make any enemies. At the same time, be cautious of over-performance. This isn’t like college where challenging your professor’s ideas could earn you an ‘A’ if you argued your point well. Over-performers often generate extra work for their superiors and colleagues and draw unwanted attention (see: McNulty in "
"10. Never step back on the salary scale except to be a founder. As a corollary, if you step back, expect to be treated as a founder.",") and are more likely to be culled for “performance” (98 percent of “performance management” in companies is politics) than under-performers. I’m not saying that you shouldn’t work hard and do a good job and learn as much as you can. That’s not necessarily over-performance; in my experience, though, over-performance—being recklessly ambitious, perhaps—is much more dangerous than under-performance. It can get you just as fired and it will happen a lot faster. If you end up stuck between the two, ebb towards under-performance."
11. Exercise., Want to spend a week investigating something on your own initiative? Don’t ask for permission. You won’t get it. You 
"12. Long hours: sometimes okay, usually harmful."," when you ask for permission; from their perspective, you’re asking for the right to pass the buck if your project doesn’t pan out. Since he can deny you and your buck-passing after-the-fact, in any case, because he outranks you, you don’t really gain anything from such a promise you might extract in the first place. So there’s no upside in asking for that permission. Of course, if you’re going to do something that presents a real risk to the business or where his permission would be reasonably expected, then go ahead and ask for permission. If the loss is small and the risk is appropriate to your level in the company (and any programming job where you’re not trusted with days to weeks of your own time is not worth having) then don’t ask for permission. Just do it, and do it well. "
13. Recognize core technological trends apart from fluff.,"It's a vicious cycle: you can tell your boss is stressed, so you try to do more to make them…"
"14. Finally, learn as much as you can. It’s hard. It takes work."," You can admit that a project or investigation didn’t pan out, although it’s best if you can spin it as a discovery exercise, but you should never apologize for a failed side project. It sets a precedent of you as a subordinate who needs more supervision. After describing something you did of your own initiative, don’t say to the boss, “Don’t worry, I did it strictly as a weekend project.” If your company won’t let you work on something during normal work hours, then don’t do it on their behalf for any reason. Respect your time. Or no one else will."
“," As we get older, we tend to see the value in transferable and general skills: functional programming rather than Spring/Hibernate; algorithms rather than quirks of a Java 1.4 legacy system. Well, CS666 ain’t pretty, but it’s transferable across the industry in a way that no programming language ever will be. I’m not saying that one should become a political animal or get obsessed with the politics, because that won’t end well, but one ought to be politically aware because there’s politics in everything we do. It’s good to start studying people and their moves early, even if you’re not planning to play (and when you’re young, you shouldn’t play often). Whether you get the Hadoop cluster in time, who gets to make the technical decisions, whether you get that feature freeze you’ve been asking for so you can clear away some technical debt, and what projects you’re assigned... all politics, man. For better or worse, "
” originally appeared on ,"and, in the real world you’d best be on the side that gets to define “merit” and structure how it is measured. If you learn CS666, you get "
. You can follow Quora on ," time to breathe and forget about it and just do great work. If you don’t learn it, your career will be shaped by those who are better at it. "
", "," When young engineers feel that their ideas are better than those of their superiors but find a lack of support, they often double down and throw in a lot of hours. "
", and "," Sorry, but if you have to throw down weekends (except on a rare occasion, like a production emergency) to bring a project through, that means that your bosses don’t "
.," care that much about it. Otherwise, you’d have the time and resources and no patience for quixotry in yourself or others. Rather than trying to hit a home run with a cracked bat, you just should just let that game be. When bosses are “shown up” by people they doubted, they don’t give that person an automatic promotion or raise. They find a way to confirm their negative impression (and your earnest self-association with a disliked project has put some stink on you) and, even if you succeed, you fail. If nothing else, there’s always “He did a great job on that, but he was distracted from his assigned work and so I can’t trust him going forward/we can’t let him set a precedent/it was actually my idea.”"
You," As you’re young and inexperienced, you probably don’t have any real power in most cases. Your intelligence doesn’t automatically give you credibility. If you get involved in someone else’s fight, or stand up for someone being unjustly treated, you’ll just get mowed down. Watch "
Gizmodo,and 
Gizmodo, and 
Sploid," for how people really are when there are any stakes. Save all your energy for your own fights. The corporate world is not a place where social justice is valued—people protest by leaving, not picketing—and you won’t make any friends as a crusader. If you fight for yourself and it ends badly, you at least get some respect from some people (and that may pay off, years down the line) for your self-preservation. If you fight for other people, you’re seen as an arrogant young fuck who didn’t know the rules."
Popular,"Young people, especially in technology, tend to fall into those traps—labeling something like a job or a company “good” or “bad” and thus reacting emotionally and sub-optimally. You might think something like: “I’m not going to work hard because "
